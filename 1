#include <stdio.h>

#define INF 999
#define MAX 100

int p[MAX], c[MAX][MAX], t[MAX][2];

// Find function with path compression
int find(int v) {
    if (p[v] == 0) return v;
    p[v] = find(p[v]);
    return p[v];
}

// Union by rank (simple version)
void union1(int i, int j) {
    int root1 = find(i);
    int root2 = find(j);
    if (root1 != root2) {
        p[root2] = root1;  // Union operation
    }
}

// Kruskal's algorithm
void kruskal(int n) {
    int i, j, k, u, v, min, res1, res2, sum = 0;
    for (i = 1; i <= n; i++) p[i] = 0; // Initialize Union-Find structure

    for (k = 0; k < n - 1; k++) {
        min = INF;
        for (i = 1; i <= n; i++) {
            for (j = 1; j <= n; j++) {
                if (i != j && c[i][j] < min) {
                    u = find(i);
                    v = find(j);
                    if (u != v) {
                        res1 = i;
                        res2 = j;
                        min = c[i][j];
                    }
                }
            }
        }
        union1(res1, res2);
        t[k][0] = res1;
        t[k][1] = res2;
        sum += min;
    }

    printf("\nCost of spanning tree is=%d", sum);
    printf("\nEdges of spanning tree are:\n");
    for (i = 0; i < n - 1; i++)
        printf("%d -> %d\n", t[i][0], t[i][1]);
}

int main() {
    int i, j, n;
    printf("\nEnter the number of vertices: ");
    scanf("%d", &n);
    
    // Initialize the cost matrix
    printf("\nEnter the graph data (adjacency matrix):\n");
    for (i = 1; i <= n; i++)
        for (j = 1; j <= n; j++)
            scanf("%d", &c[i][j]);

    kruskal(n);
    return 0;
}
